/* automatically generated by rust-bindgen */

pub type poolStruct = poolStructT;
pub type engineStruct = engineStructT;
pub type workerStruct = workerStructT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct workerStructT {
    pub pool: *mut poolStruct,
}
#[test]
fn bindgen_test_layout_workerStructT() {
    assert_eq!(
        ::std::mem::size_of::<workerStructT>(),
        8usize,
        concat!("Size of: ", stringify!(workerStructT))
    );
    assert_eq!(
        ::std::mem::align_of::<workerStructT>(),
        8usize,
        concat!("Alignment of ", stringify!(workerStructT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<workerStructT>())).pool as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(workerStructT),
            "::",
            stringify!(pool)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct poolStructT {
    pub engine: *mut engineStruct,
    pub workers: *mut *mut workerStruct,
    pub available: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_poolStructT() {
    assert_eq!(
        ::std::mem::size_of::<poolStructT>(),
        24usize,
        concat!("Size of: ", stringify!(poolStructT))
    );
    assert_eq!(
        ::std::mem::align_of::<poolStructT>(),
        8usize,
        concat!("Alignment of ", stringify!(poolStructT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<poolStructT>())).engine as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(poolStructT),
            "::",
            stringify!(engine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<poolStructT>())).workers as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(poolStructT),
            "::",
            stringify!(workers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<poolStructT>())).available as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(poolStructT),
            "::",
            stringify!(available)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct engineStructT {
    pub pool: *mut poolStruct,
}
#[test]
fn bindgen_test_layout_engineStructT() {
    assert_eq!(
        ::std::mem::size_of::<engineStructT>(),
        8usize,
        concat!("Size of: ", stringify!(engineStructT))
    );
    assert_eq!(
        ::std::mem::align_of::<engineStructT>(),
        8usize,
        concat!("Alignment of ", stringify!(engineStructT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<engineStructT>())).pool as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(engineStructT),
            "::",
            stringify!(pool)
        )
    );
}
extern "C" {
    pub fn startEngine(engine: *mut engineStruct);
}
extern "C" {
    pub fn getWorker(engine: *const engineStruct) -> *mut workerStruct;
}
extern "C" {
    pub fn releaseWorker(worker: *mut workerStruct) -> ::std::os::raw::c_int;
}
